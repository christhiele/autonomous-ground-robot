import numpy as np
import time

# Note - a bunch of the underlying math & code for that math comes from meshlogid @ https://meshlogic.github.io/posts/jupyter/curve-fitting/fitting-a-circle-to-cluster-of-3d-points/

# -------------------------------------------------------------------------------
#  Find North by Projected Coordinates
# -------------------------------------------------------------------------------
def findnorth(P_Circle):
    dymax = 0
    for i in P_Circle:
        ymax = i[1]
        if ymax > dymax:
            dymax = ymax
            coordmax = i
    return coordmax

# -------------------------------------------------------------------------------
#  Generate Circle by vectors
# -------------------------------------------------------------------------------
def generate_circle_by_vectors(t, C, r, n, u):
    n = n / np.linalg.norm(n)
    u = u / np.linalg.norm(u)
    P_circle = r * np.cos(t)[:, np.newaxis] * u + r * np.sin(t)[:, np.newaxis] * np.cross(n, u) + C
    return P_circle

# -------------------------------------------------------------------------------
# FIT CIRCLE 2D
# - Find center [xc, yc] and radius r of circle fitting to set of 2D points
# - Optionally specify weights for points
#
# - Implicit circle function:
#   (x-xc)^2 + (y-yc)^2 = r^2
#   (2*xc)*x + (2*yc)*y + (r^2-xc^2-yc^2) = x^2+y^2
#   c[0]*x + c[1]*y + c[2] = x^2+y^2
#
# - Solution by method of least squares:
#   A*c = b, c' = argmin(||A*c - b||^2)
#   A = [x y 1], b = [x^2+y^2]
# -------------------------------------------------------------------------------
def fit_circle_2d(x, y, w=[]):
    A = np.array([x, y, np.ones(len(x))]).T
    b = x ** 2 + y ** 2

    # Modify A,b for weighted least squares
    if len(w) == len(x):
        W = np.diag(w)
        A = np.dot(W, A)
        b = np.dot(W, b)

    # Solve by method of least squares
    c = np.linalg.lstsq(A, b, rcond=None)[0]

    # Get circle parameters from solution c
    xc = c[0] / 2
    yc = c[1] / 2
    r = np.sqrt(c[2] + xc ** 2 + yc ** 2)
    return xc, yc, r

# -------------------------------------------------------------------------------
# RODRIGUES ROTATION
# - Rotate given points based on a starting and ending vector
# - Axis k and angle of rotation theta given by vectors n0,n1
#   P_rot = P*np.cos(theta) + (k x P)*sin(theta) + k*<k,P>*(1-np.cos(theta))
# -------------------------------------------------------------------------------
def rodrigues_rot(P, n0, n1):
    # If P is only 1d array (coords of single point), fix it to be matrix
    if P.ndim == 1:
        P = P[np.newaxis, :]

    # Get vector of rotation k and angle theta
    n0 = n0 / np.linalg.norm(n0)
    n1 = n1 / np.linalg.norm(n1)
    k = np.cross(n0, n1)
    k = k / np.linalg.norm(k)
    theta = np.arccos(np.dot(n0, n1))

    # Compute rotated points
    P_rot = np.zeros((len(P), 3))
    for i in range(len(P)):
        P_rot[i] = P[i] * np.cos(theta) + np.cross(k, P[i]) * np.sin(theta) + k * np.dot(k, P[i]) * (1 - np.cos(theta))

    return P_rot


def processmagnet(dx,dy,dz):

    q = np.array((dx, dy, dz), dtype=float)
    P = np.transpose(q)

    # -------------------------------------------------------------------------------
    # (1) Fitting plane by SVD for the mean-centered data
    # Eq. of plane is <p,n> + d = 0, where p is a point on plane and n is normal vector
    # -------------------------------------------------------------------------------
    P_mean = P.mean(axis=0)
    P_centered = P - P_mean
    U, s, V = np.linalg.svd(P_centered)

    # Normal vector of fitting plane is given by 3rd column in V
    # Note linalg.svd returns V^T, so we need to select 3rd row from V^T
    normal = V[2, :]
    d = -np.dot(P_mean, normal)  # d = -<p,n>

    # -------------------------------------------------------------------------------
    # (2) Project points to coords X-Y in 2D plane
    # -------------------------------------------------------------------------------
    P_xy = rodrigues_rot(P_centered, normal, [0, 0, 1])

    # -------------------------------------------------------------------------------
    # (3) Fit circle in new 2D coords
    # -------------------------------------------------------------------------------
    xc, yc, r = fit_circle_2d(P_xy[:, 0], P_xy[:, 1])

    # --- Generate circle points in 2D
    t = np.linspace(0, 2 * np.pi, 100)
    xx = xc + r * np.cos(t)
    yy = yc + r * np.sin(t)

    # -------------------------------------------------------------------------------
    # (4) Transform circle center back to 3D coords
    # -------------------------------------------------------------------------------
    C = rodrigues_rot(np.array([xc, yc, 0]), [0, 0, 1], normal) + P_mean
    C = C.flatten()

    # --- Generate points for fitting circle
    t = np.linspace(0, 2 * np.pi, 100)
    u = P[0] - C
    P_fitcircle = generate_circle_by_vectors(t, C, r, normal, u)

    # -------------------------------------------------------------------------------
    # (5) Get North 3D coordinates (projected not actual)
    # -------------------------------------------------------------------------------
    coordymax = findnorth(P_fitcircle)

    # -------------------------------------------------------------------------------
    # (6) Prep Results to Write
    # -------------------------------------------------------------------------------

    currenttime = time.time()

    C = list(C)
    coordymax = list(coordymax)
    normal = list(normal)

    # print(currenttime,C,coordymax,normal)



    # -------------------------------------------------------------------------------
    # (7) Write Results to File
    # -------------------------------------------------------------------------------

    f = open("magnetdata.txt", "w+")
    f.write("# Calibrated Magnetometer data - time calibrated, center coordinates, north coordinates, and normal are given. Can use to avoid recalibrating magnet for every use\n")
    f.write("%s\n" % currenttime)
    f.write("%s\n" % C)
    f.write("%s\n" % coordymax)
    f.write("%s\n" % normal)
    f.close()
    print("Magnetic Calibration Complete.")

if __name__ == "__main__":
    dx = [48.847, 72.744, 66.945, 83.286, 85.746, 79.596, 84.868, 92.599, 95.586, 91.193, 97.695, 102.087, 94.005,
          89.436, 72.392, 79.596, 72.392, 62.201, 68.0, 63.08, 48.496, 45.157, 48.144, 42.346, 39.886, 31.628, 42.17,
          49.55, 46.036, 39.535, 50.604, 58.511, 64.661, 72.744, 64.31, 70.284, 81.881, 92.072, 88.382, 90.49, 91.72,
          90.842, 95.059, 92.072, 88.031, 81.881, 85.746, 83.111, 76.434, 62.377, 58.336, 53.064, 47.09, 47.09, 43.225,
          42.346, 43.049, 46.387, 42.697, 45.685, 36.723, 43.4, 40.238, 51.132, 67.824, 63.255, 69.581, 74.677, 86.449,
          83.111, 91.369, 93.829, 101.56, 101.56, 96.289, 76.961, 86.976, 88.733, 84.516, 74.852, 79.596, 60.62, 55.524,
          61.674, 54.119, 52.186, 50.077, 50.077, 38.305, 46.212, 43.576, 38.305, 39.008, 46.914, 54.294, 45.86, 57.457,
          68.527, 68.175, 73.271, 67.824, 79.069, 95.235, 89.963, 92.423, 98.222, 94.708, 94.18, 100.857, 85.746,
          80.651, 87.679, 76.609, 68.175, 66.418, 56.403, 58.511, 47.09, 49.374, 42.17, 42.697, 46.739, 38.305, 39.359,
          44.103, 43.4, 39.008, 55.524, 62.728, 57.984, 70.987, 73.447, 80.651, 86.801, 89.612, 98.397, 87.328, 90.49,
          99.452, 89.963, 104.02, 94.532, 77.488, 81.178, 81.178, 73.095, 69.581, 63.958, 70.46, 56.403, 41.995, 38.129,
          43.752, 43.225, 40.589, 36.723, 47.09]
    dy = [217.549, 240.114, 232.181, 221.78, 222.485, 221.603, 215.609, 207.852, 207.323, 198.332, 191.809, 195.512,
          185.992, 174.709, 188.283, 177.177, 170.654, 169.596, 183.524, 170.83, 172.417, 185.286, 197.098, 196.569,
          201.153, 190.399, 197.098, 212.612, 210.144, 221.251, 221.427, 222.661, 224.6, 233.768, 235.531, 231.652,
          223.19, 216.491, 209.968, 209.263, 206.971, 200.095, 191.281, 194.63, 181.761, 183.7, 178.764, 182.113,
          178.587, 175.767, 168.538, 171.712, 184.405, 179.116, 182.289, 191.633, 196.922, 194.63, 209.615, 215.786,
          224.777, 214.552, 227.597, 224.777, 226.716, 228.831, 226.716, 220.193, 217.196, 209.968, 211.554, 210.144,
          209.439, 208.381, 201.682, 195.688, 168.362, 177.529, 176.824, 177.353, 176.824, 179.645, 175.59, 178.587,
          179.821, 184.229, 189.518, 190.928, 191.809, 190.575, 205.56, 213.317, 208.734, 206.442, 214.199, 225.129,
          227.245, 229.889, 232.71, 228.655, 221.427, 211.554, 215.786, 210.849, 204.503, 195.864, 194.806, 192.867,
          187.226, 190.752, 189.165, 184.934, 174.885, 178.411, 168.538, 181.761, 177.882, 177.706, 172.946, 190.752,
          190.575, 197.451, 206.266, 216.843, 219.135, 216.314, 210.144, 218.959, 220.898, 227.068, 217.549, 224.6,
          222.309, 218.606, 223.19, 218.959, 212.789, 206.089, 200.624, 194.983, 191.457, 188.989, 189.87, 175.59,
          169.244, 174.885, 173.122, 175.238, 184.229, 182.466, 189.165, 178.94, 175.061, 191.457, 197.275, 202.563,
          207.676]
    dz = [-68.857, -95.786, -89.48, -70.221, -83.515, -75.163, -78.913, -57.097, -75.675, -53.006, -74.993, -77.549,
          -66.301, -48.916, -79.424, -64.937, -73.289, -77.379, -86.071, -68.687, -56.926, -64.255, -69.198, -64.596,
          -57.438, -63.744, -81.47, -73.629, -74.993, -77.549, -63.062, -79.254, -67.153, -68.516, -83.174, -78.061,
          -80.788, -78.402, -57.438, -61.187, -54.54, -61.869, -63.574, -85.56, -58.801, -70.562, -67.153, -63.574,
          -56.415, -57.097, -76.356, -79.083, -80.788, -75.675, -79.083, -81.64, -73.8, -69.198, -70.391, -80.788,
          -82.663, -62.551, -75.504, -75.845, -69.88, -63.062, -82.833, -68.005, -63.062, -67.323, -59.653, -66.471,
          -55.563, -59.994, -57.267, -64.426, -57.438, -54.029, -56.415, -80.447, -68.346, -76.527, -75.334, -61.187,
          -55.904, -57.779, -77.549, -76.186, -59.653, -68.687, -80.788, -77.72, -61.017, -59.483, -79.254, -79.595,
          -77.549, -84.537, -80.106, -59.483, -57.608, -73.629, -70.562, -82.833, -65.789, -60.506, -51.302, -73.97,
          -72.266, -79.083, -67.664, -72.095, -54.54, -79.424, -54.199, -70.391, -59.824, -59.313, -52.665, -71.925,
          -69.028, -73.97, -71.243, -68.516, -81.64, -72.095, -64.426, -75.334, -83.344, -77.038, -57.267, -58.29,
          -80.276, -58.972, -77.379, -66.812, -72.095, -76.186, -69.539, -68.857, -77.72, -63.403, -73.118, -79.083,
          -55.904, -68.516, -67.494, -72.607, -69.028, -55.733, -72.095, -57.097, -60.847, -60.335, -81.299, -76.527,
          -80.788]

    processmagnet(dx,dy,dz)
